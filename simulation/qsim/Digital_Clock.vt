// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/23/2022 01:10:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TOP
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TOP_vlg_sample_tst(
	clk,
	clock_en,
	clock_hour_ge,
	clock_hour_shi,
	clock_min_ge,
	clock_min_shi,
	rst_n,
	set_hour_ge,
	set_hour_shi,
	set_min_ge,
	set_min_shi,
	set_sec_ge,
	set_sec_shi,
	set_time_finish,
	sampler_tx
);
input  clk;
input  clock_en;
input [3:0] clock_hour_ge;
input [3:0] clock_hour_shi;
input [3:0] clock_min_ge;
input [3:0] clock_min_shi;
input  rst_n;
input [3:0] set_hour_ge;
input [3:0] set_hour_shi;
input [3:0] set_min_ge;
input [3:0] set_min_shi;
input [3:0] set_sec_ge;
input [3:0] set_sec_shi;
input  set_time_finish;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clock_en or clock_hour_ge or clock_hour_shi or clock_min_ge or clock_min_shi or rst_n or set_hour_ge or set_hour_shi or set_min_ge or set_min_shi or set_sec_ge or set_sec_shi or set_time_finish)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TOP_vlg_check_tst (
	clock_out,
	data_out,
	hour_ge_r,
	hour_shi_r,
	min_ge_r,
	min_shi_r,
	sec_ge_r,
	sec_shi_r,
	select,
	sampler_rx
);
input  clock_out;
input [7:0] data_out;
input [3:0] hour_ge_r;
input [3:0] hour_shi_r;
input [3:0] min_ge_r;
input [3:0] min_shi_r;
input [3:0] sec_ge_r;
input [3:0] sec_shi_r;
input [7:0] select;
input sampler_rx;

reg  clock_out_expected;
reg [7:0] data_out_expected;
reg [3:0] hour_ge_r_expected;
reg [3:0] hour_shi_r_expected;
reg [3:0] min_ge_r_expected;
reg [3:0] min_shi_r_expected;
reg [3:0] sec_ge_r_expected;
reg [3:0] sec_shi_r_expected;
reg [7:0] select_expected;

reg  clock_out_prev;
reg [7:0] data_out_prev;
reg [3:0] hour_ge_r_prev;
reg [3:0] hour_shi_r_prev;
reg [3:0] min_ge_r_prev;
reg [3:0] min_shi_r_prev;
reg [3:0] sec_ge_r_prev;
reg [3:0] sec_shi_r_prev;
reg [7:0] select_prev;

reg [3:0] hour_ge_r_expected_prev;
reg [3:0] hour_shi_r_expected_prev;
reg [3:0] min_ge_r_expected_prev;
reg [3:0] min_shi_r_expected_prev;
reg [3:0] sec_ge_r_expected_prev;
reg [3:0] sec_shi_r_expected_prev;

reg [3:0] last_hour_ge_r_exp;
reg [3:0] last_hour_shi_r_exp;
reg [3:0] last_min_ge_r_exp;
reg [3:0] last_min_shi_r_exp;
reg [3:0] last_sec_ge_r_exp;
reg [3:0] last_sec_shi_r_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	clock_out_prev = clock_out;
	data_out_prev = data_out;
	hour_ge_r_prev = hour_ge_r;
	hour_shi_r_prev = hour_shi_r;
	min_ge_r_prev = min_ge_r;
	min_shi_r_prev = min_shi_r;
	sec_ge_r_prev = sec_ge_r;
	sec_shi_r_prev = sec_shi_r;
	select_prev = select;
end

// update expected /o prevs

always @(trigger)
begin
	hour_ge_r_expected_prev = hour_ge_r_expected;
	hour_shi_r_expected_prev = hour_shi_r_expected;
	min_ge_r_expected_prev = min_ge_r_expected;
	min_shi_r_expected_prev = min_shi_r_expected;
	sec_ge_r_expected_prev = sec_ge_r_expected;
	sec_shi_r_expected_prev = sec_shi_r_expected;
end


// expected hour_shi_r[ 3 ]
initial
begin
	hour_shi_r_expected[3] = 1'bX;
	hour_shi_r_expected[3] = #999000 1'b0;
end 
// expected hour_shi_r[ 2 ]
initial
begin
	hour_shi_r_expected[2] = 1'bX;
	hour_shi_r_expected[2] = #999000 1'b0;
end 
// expected hour_shi_r[ 1 ]
initial
begin
	hour_shi_r_expected[1] = 1'bX;
	hour_shi_r_expected[1] = #999000 1'b0;
end 
// expected hour_shi_r[ 0 ]
initial
begin
	hour_shi_r_expected[0] = 1'bX;
	hour_shi_r_expected[0] = #999000 1'b0;
end 
// expected hour_ge_r[ 3 ]
initial
begin
	hour_ge_r_expected[3] = 1'bX;
	hour_ge_r_expected[3] = #999000 1'b0;
end 
// expected hour_ge_r[ 2 ]
initial
begin
	hour_ge_r_expected[2] = 1'bX;
	hour_ge_r_expected[2] = #999000 1'b0;
end 
// expected hour_ge_r[ 1 ]
initial
begin
	hour_ge_r_expected[1] = 1'bX;
	hour_ge_r_expected[1] = #999000 1'b0;
end 
// expected hour_ge_r[ 0 ]
initial
begin
	hour_ge_r_expected[0] = 1'bX;
	hour_ge_r_expected[0] = #999000 1'b0;
end 
// expected min_shi_r[ 3 ]
initial
begin
	min_shi_r_expected[3] = 1'bX;
	min_shi_r_expected[3] = #999000 1'b0;
end 
// expected min_shi_r[ 2 ]
initial
begin
	min_shi_r_expected[2] = 1'bX;
	min_shi_r_expected[2] = #999000 1'b0;
end 
// expected min_shi_r[ 1 ]
initial
begin
	min_shi_r_expected[1] = 1'bX;
	min_shi_r_expected[1] = #999000 1'b0;
end 
// expected min_shi_r[ 0 ]
initial
begin
	min_shi_r_expected[0] = 1'bX;
	min_shi_r_expected[0] = #999000 1'b0;
end 
// expected min_ge_r[ 3 ]
initial
begin
	min_ge_r_expected[3] = 1'bX;
	min_ge_r_expected[3] = #999000 1'b0;
end 
// expected min_ge_r[ 2 ]
initial
begin
	min_ge_r_expected[2] = 1'bX;
	min_ge_r_expected[2] = #999000 1'b0;
end 
// expected min_ge_r[ 1 ]
initial
begin
	min_ge_r_expected[1] = 1'bX;
	min_ge_r_expected[1] = #999000 1'b0;
end 
// expected min_ge_r[ 0 ]
initial
begin
	min_ge_r_expected[0] = 1'bX;
	min_ge_r_expected[0] = #999000 1'b0;
end 
// expected sec_shi_r[ 3 ]
initial
begin
	sec_shi_r_expected[3] = 1'bX;
	sec_shi_r_expected[3] = #999000 1'b0;
end 
// expected sec_shi_r[ 2 ]
initial
begin
	sec_shi_r_expected[2] = 1'bX;
	sec_shi_r_expected[2] = #999000 1'b0;
end 
// expected sec_shi_r[ 1 ]
initial
begin
	sec_shi_r_expected[1] = 1'bX;
	sec_shi_r_expected[1] = #999000 1'b0;
end 
// expected sec_shi_r[ 0 ]
initial
begin
	sec_shi_r_expected[0] = 1'bX;
	sec_shi_r_expected[0] = #999000 1'b0;
end 
// expected sec_ge_r[ 3 ]
initial
begin
	sec_ge_r_expected[3] = 1'bX;
	sec_ge_r_expected[3] = #999000 1'b0;
end 
// expected sec_ge_r[ 2 ]
initial
begin
	sec_ge_r_expected[2] = 1'bX;
	sec_ge_r_expected[2] = #999000 1'b0;
end 
// expected sec_ge_r[ 1 ]
initial
begin
	sec_ge_r_expected[1] = 1'bX;
	sec_ge_r_expected[1] = #999000 1'b0;
end 
// expected sec_ge_r[ 0 ]
initial
begin
	sec_ge_r_expected[0] = 1'bX;
	sec_ge_r_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(clock_out_expected or clock_out or data_out_expected or data_out or hour_ge_r_expected or hour_ge_r or hour_shi_r_expected or hour_shi_r or min_ge_r_expected or min_ge_r or min_shi_r_expected or min_shi_r or sec_ge_r_expected or sec_ge_r or sec_shi_r_expected or sec_shi_r or select_expected or select)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clock_out = %b | expected data_out = %b | expected hour_ge_r = %b | expected hour_shi_r = %b | expected min_ge_r = %b | expected min_shi_r = %b | expected sec_ge_r = %b | expected sec_shi_r = %b | expected select = %b | ",clock_out_expected_prev,data_out_expected_prev,hour_ge_r_expected_prev,hour_shi_r_expected_prev,min_ge_r_expected_prev,min_shi_r_expected_prev,sec_ge_r_expected_prev,sec_shi_r_expected_prev,select_expected_prev);
	$display("| real clock_out = %b | real data_out = %b | real hour_ge_r = %b | real hour_shi_r = %b | real min_ge_r = %b | real min_shi_r = %b | real sec_ge_r = %b | real sec_shi_r = %b | real select = %b | ",clock_out_prev,data_out_prev,hour_ge_r_prev,hour_shi_r_prev,min_ge_r_prev,min_shi_r_prev,sec_ge_r_prev,sec_shi_r_prev,select_prev);
`endif
	if (
		( hour_ge_r_expected_prev[0] !== 1'bx ) && ( hour_ge_r_prev[0] !== hour_ge_r_expected_prev[0] )
		&& ((hour_ge_r_expected_prev[0] !== last_hour_ge_r_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hour_ge_r[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hour_ge_r_expected_prev);
		$display ("     Real value = %b", hour_ge_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hour_ge_r_exp[0] = hour_ge_r_expected_prev[0];
	end
	if (
		( hour_ge_r_expected_prev[1] !== 1'bx ) && ( hour_ge_r_prev[1] !== hour_ge_r_expected_prev[1] )
		&& ((hour_ge_r_expected_prev[1] !== last_hour_ge_r_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hour_ge_r[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hour_ge_r_expected_prev);
		$display ("     Real value = %b", hour_ge_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hour_ge_r_exp[1] = hour_ge_r_expected_prev[1];
	end
	if (
		( hour_ge_r_expected_prev[2] !== 1'bx ) && ( hour_ge_r_prev[2] !== hour_ge_r_expected_prev[2] )
		&& ((hour_ge_r_expected_prev[2] !== last_hour_ge_r_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hour_ge_r[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hour_ge_r_expected_prev);
		$display ("     Real value = %b", hour_ge_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hour_ge_r_exp[2] = hour_ge_r_expected_prev[2];
	end
	if (
		( hour_ge_r_expected_prev[3] !== 1'bx ) && ( hour_ge_r_prev[3] !== hour_ge_r_expected_prev[3] )
		&& ((hour_ge_r_expected_prev[3] !== last_hour_ge_r_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hour_ge_r[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hour_ge_r_expected_prev);
		$display ("     Real value = %b", hour_ge_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hour_ge_r_exp[3] = hour_ge_r_expected_prev[3];
	end
	if (
		( hour_shi_r_expected_prev[0] !== 1'bx ) && ( hour_shi_r_prev[0] !== hour_shi_r_expected_prev[0] )
		&& ((hour_shi_r_expected_prev[0] !== last_hour_shi_r_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hour_shi_r[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hour_shi_r_expected_prev);
		$display ("     Real value = %b", hour_shi_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hour_shi_r_exp[0] = hour_shi_r_expected_prev[0];
	end
	if (
		( hour_shi_r_expected_prev[1] !== 1'bx ) && ( hour_shi_r_prev[1] !== hour_shi_r_expected_prev[1] )
		&& ((hour_shi_r_expected_prev[1] !== last_hour_shi_r_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hour_shi_r[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hour_shi_r_expected_prev);
		$display ("     Real value = %b", hour_shi_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hour_shi_r_exp[1] = hour_shi_r_expected_prev[1];
	end
	if (
		( hour_shi_r_expected_prev[2] !== 1'bx ) && ( hour_shi_r_prev[2] !== hour_shi_r_expected_prev[2] )
		&& ((hour_shi_r_expected_prev[2] !== last_hour_shi_r_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hour_shi_r[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hour_shi_r_expected_prev);
		$display ("     Real value = %b", hour_shi_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hour_shi_r_exp[2] = hour_shi_r_expected_prev[2];
	end
	if (
		( hour_shi_r_expected_prev[3] !== 1'bx ) && ( hour_shi_r_prev[3] !== hour_shi_r_expected_prev[3] )
		&& ((hour_shi_r_expected_prev[3] !== last_hour_shi_r_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hour_shi_r[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hour_shi_r_expected_prev);
		$display ("     Real value = %b", hour_shi_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hour_shi_r_exp[3] = hour_shi_r_expected_prev[3];
	end
	if (
		( min_ge_r_expected_prev[0] !== 1'bx ) && ( min_ge_r_prev[0] !== min_ge_r_expected_prev[0] )
		&& ((min_ge_r_expected_prev[0] !== last_min_ge_r_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min_ge_r[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_ge_r_expected_prev);
		$display ("     Real value = %b", min_ge_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_min_ge_r_exp[0] = min_ge_r_expected_prev[0];
	end
	if (
		( min_ge_r_expected_prev[1] !== 1'bx ) && ( min_ge_r_prev[1] !== min_ge_r_expected_prev[1] )
		&& ((min_ge_r_expected_prev[1] !== last_min_ge_r_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min_ge_r[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_ge_r_expected_prev);
		$display ("     Real value = %b", min_ge_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_min_ge_r_exp[1] = min_ge_r_expected_prev[1];
	end
	if (
		( min_ge_r_expected_prev[2] !== 1'bx ) && ( min_ge_r_prev[2] !== min_ge_r_expected_prev[2] )
		&& ((min_ge_r_expected_prev[2] !== last_min_ge_r_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min_ge_r[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_ge_r_expected_prev);
		$display ("     Real value = %b", min_ge_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_min_ge_r_exp[2] = min_ge_r_expected_prev[2];
	end
	if (
		( min_ge_r_expected_prev[3] !== 1'bx ) && ( min_ge_r_prev[3] !== min_ge_r_expected_prev[3] )
		&& ((min_ge_r_expected_prev[3] !== last_min_ge_r_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min_ge_r[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_ge_r_expected_prev);
		$display ("     Real value = %b", min_ge_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_min_ge_r_exp[3] = min_ge_r_expected_prev[3];
	end
	if (
		( min_shi_r_expected_prev[0] !== 1'bx ) && ( min_shi_r_prev[0] !== min_shi_r_expected_prev[0] )
		&& ((min_shi_r_expected_prev[0] !== last_min_shi_r_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min_shi_r[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_shi_r_expected_prev);
		$display ("     Real value = %b", min_shi_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_min_shi_r_exp[0] = min_shi_r_expected_prev[0];
	end
	if (
		( min_shi_r_expected_prev[1] !== 1'bx ) && ( min_shi_r_prev[1] !== min_shi_r_expected_prev[1] )
		&& ((min_shi_r_expected_prev[1] !== last_min_shi_r_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min_shi_r[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_shi_r_expected_prev);
		$display ("     Real value = %b", min_shi_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_min_shi_r_exp[1] = min_shi_r_expected_prev[1];
	end
	if (
		( min_shi_r_expected_prev[2] !== 1'bx ) && ( min_shi_r_prev[2] !== min_shi_r_expected_prev[2] )
		&& ((min_shi_r_expected_prev[2] !== last_min_shi_r_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min_shi_r[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_shi_r_expected_prev);
		$display ("     Real value = %b", min_shi_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_min_shi_r_exp[2] = min_shi_r_expected_prev[2];
	end
	if (
		( min_shi_r_expected_prev[3] !== 1'bx ) && ( min_shi_r_prev[3] !== min_shi_r_expected_prev[3] )
		&& ((min_shi_r_expected_prev[3] !== last_min_shi_r_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min_shi_r[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_shi_r_expected_prev);
		$display ("     Real value = %b", min_shi_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_min_shi_r_exp[3] = min_shi_r_expected_prev[3];
	end
	if (
		( sec_ge_r_expected_prev[0] !== 1'bx ) && ( sec_ge_r_prev[0] !== sec_ge_r_expected_prev[0] )
		&& ((sec_ge_r_expected_prev[0] !== last_sec_ge_r_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_ge_r[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_ge_r_expected_prev);
		$display ("     Real value = %b", sec_ge_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sec_ge_r_exp[0] = sec_ge_r_expected_prev[0];
	end
	if (
		( sec_ge_r_expected_prev[1] !== 1'bx ) && ( sec_ge_r_prev[1] !== sec_ge_r_expected_prev[1] )
		&& ((sec_ge_r_expected_prev[1] !== last_sec_ge_r_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_ge_r[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_ge_r_expected_prev);
		$display ("     Real value = %b", sec_ge_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sec_ge_r_exp[1] = sec_ge_r_expected_prev[1];
	end
	if (
		( sec_ge_r_expected_prev[2] !== 1'bx ) && ( sec_ge_r_prev[2] !== sec_ge_r_expected_prev[2] )
		&& ((sec_ge_r_expected_prev[2] !== last_sec_ge_r_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_ge_r[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_ge_r_expected_prev);
		$display ("     Real value = %b", sec_ge_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sec_ge_r_exp[2] = sec_ge_r_expected_prev[2];
	end
	if (
		( sec_ge_r_expected_prev[3] !== 1'bx ) && ( sec_ge_r_prev[3] !== sec_ge_r_expected_prev[3] )
		&& ((sec_ge_r_expected_prev[3] !== last_sec_ge_r_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_ge_r[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_ge_r_expected_prev);
		$display ("     Real value = %b", sec_ge_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sec_ge_r_exp[3] = sec_ge_r_expected_prev[3];
	end
	if (
		( sec_shi_r_expected_prev[0] !== 1'bx ) && ( sec_shi_r_prev[0] !== sec_shi_r_expected_prev[0] )
		&& ((sec_shi_r_expected_prev[0] !== last_sec_shi_r_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_shi_r[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_shi_r_expected_prev);
		$display ("     Real value = %b", sec_shi_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sec_shi_r_exp[0] = sec_shi_r_expected_prev[0];
	end
	if (
		( sec_shi_r_expected_prev[1] !== 1'bx ) && ( sec_shi_r_prev[1] !== sec_shi_r_expected_prev[1] )
		&& ((sec_shi_r_expected_prev[1] !== last_sec_shi_r_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_shi_r[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_shi_r_expected_prev);
		$display ("     Real value = %b", sec_shi_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sec_shi_r_exp[1] = sec_shi_r_expected_prev[1];
	end
	if (
		( sec_shi_r_expected_prev[2] !== 1'bx ) && ( sec_shi_r_prev[2] !== sec_shi_r_expected_prev[2] )
		&& ((sec_shi_r_expected_prev[2] !== last_sec_shi_r_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_shi_r[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_shi_r_expected_prev);
		$display ("     Real value = %b", sec_shi_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sec_shi_r_exp[2] = sec_shi_r_expected_prev[2];
	end
	if (
		( sec_shi_r_expected_prev[3] !== 1'bx ) && ( sec_shi_r_prev[3] !== sec_shi_r_expected_prev[3] )
		&& ((sec_shi_r_expected_prev[3] !== last_sec_shi_r_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_shi_r[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_shi_r_expected_prev);
		$display ("     Real value = %b", sec_shi_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sec_shi_r_exp[3] = sec_shi_r_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TOP_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clock_en;
reg [3:0] clock_hour_ge;
reg [3:0] clock_hour_shi;
reg [3:0] clock_min_ge;
reg [3:0] clock_min_shi;
reg rst_n;
reg [3:0] set_hour_ge;
reg [3:0] set_hour_shi;
reg [3:0] set_min_ge;
reg [3:0] set_min_shi;
reg [3:0] set_sec_ge;
reg [3:0] set_sec_shi;
reg set_time_finish;
// wires                                               
wire clock_out;
wire [7:0] data_out;
wire [3:0] hour_ge_r;
wire [3:0] hour_shi_r;
wire [3:0] min_ge_r;
wire [3:0] min_shi_r;
wire [3:0] sec_ge_r;
wire [3:0] sec_shi_r;
wire [7:0] select;

wire sampler;                             

// assign statements (if any)                          
TOP i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clock_en(clock_en),
	.clock_hour_ge(clock_hour_ge),
	.clock_hour_shi(clock_hour_shi),
	.clock_min_ge(clock_min_ge),
	.clock_min_shi(clock_min_shi),
	.clock_out(clock_out),
	.data_out(data_out),
	.hour_ge_r(hour_ge_r),
	.hour_shi_r(hour_shi_r),
	.min_ge_r(min_ge_r),
	.min_shi_r(min_shi_r),
	.rst_n(rst_n),
	.sec_ge_r(sec_ge_r),
	.sec_shi_r(sec_shi_r),
	.select(select),
	.set_hour_ge(set_hour_ge),
	.set_hour_shi(set_hour_shi),
	.set_min_ge(set_min_ge),
	.set_min_shi(set_min_shi),
	.set_sec_ge(set_sec_ge),
	.set_sec_shi(set_sec_shi),
	.set_time_finish(set_time_finish)
);

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// rst_n
initial
begin
	rst_n = 1'b1;
	rst_n = #780000 1'b0;
	rst_n = #5000 1'b1;
end 
// clock_hour_shi[ 3 ]
initial
begin
	clock_hour_shi[3] = 1'b0;
end 
// clock_hour_shi[ 2 ]
initial
begin
	clock_hour_shi[2] = 1'b0;
end 
// clock_hour_shi[ 1 ]
initial
begin
	clock_hour_shi[1] = 1'b0;
end 
// clock_hour_shi[ 0 ]
initial
begin
	clock_hour_shi[0] = 1'b1;
end 
// clock_hour_ge[ 3 ]
initial
begin
	clock_hour_ge[3] = 1'b0;
end 
// clock_hour_ge[ 2 ]
initial
begin
	clock_hour_ge[2] = 1'b0;
end 
// clock_hour_ge[ 1 ]
initial
begin
	clock_hour_ge[1] = 1'b1;
end 
// clock_hour_ge[ 0 ]
initial
begin
	clock_hour_ge[0] = 1'b0;
end 
// clock_min_shi[ 3 ]
initial
begin
	clock_min_shi[3] = 1'b0;
end 
// clock_min_shi[ 2 ]
initial
begin
	clock_min_shi[2] = 1'b0;
end 
// clock_min_shi[ 1 ]
initial
begin
	clock_min_shi[1] = 1'b1;
end 
// clock_min_shi[ 0 ]
initial
begin
	clock_min_shi[0] = 1'b1;
end 
// clock_min_ge[ 3 ]
initial
begin
	clock_min_ge[3] = 1'b0;
end 
// clock_min_ge[ 2 ]
initial
begin
	clock_min_ge[2] = 1'b0;
end 
// clock_min_ge[ 1 ]
initial
begin
	clock_min_ge[1] = 1'b0;
end 
// clock_min_ge[ 0 ]
initial
begin
	clock_min_ge[0] = 1'b0;
end 
// set_hour_shi[ 3 ]
initial
begin
	set_hour_shi[3] = 1'b0;
end 
// set_hour_shi[ 2 ]
initial
begin
	set_hour_shi[2] = 1'b0;
end 
// set_hour_shi[ 1 ]
initial
begin
	set_hour_shi[1] = 1'b0;
end 
// set_hour_shi[ 0 ]
initial
begin
	set_hour_shi[0] = 1'b1;
end 
// set_hour_ge[ 3 ]
initial
begin
	set_hour_ge[3] = 1'b0;
end 
// set_hour_ge[ 2 ]
initial
begin
	set_hour_ge[2] = 1'b0;
end 
// set_hour_ge[ 1 ]
initial
begin
	set_hour_ge[1] = 1'b1;
end 
// set_hour_ge[ 0 ]
initial
begin
	set_hour_ge[0] = 1'b0;
end 
// set_min_shi[ 3 ]
initial
begin
	set_min_shi[3] = 1'b0;
end 
// set_min_shi[ 2 ]
initial
begin
	set_min_shi[2] = 1'b0;
end 
// set_min_shi[ 1 ]
initial
begin
	set_min_shi[1] = 1'b0;
end 
// set_min_shi[ 0 ]
initial
begin
	set_min_shi[0] = 1'b0;
end 
// set_min_ge[ 3 ]
initial
begin
	set_min_ge[3] = 1'b0;
end 
// set_min_ge[ 2 ]
initial
begin
	set_min_ge[2] = 1'b0;
end 
// set_min_ge[ 1 ]
initial
begin
	set_min_ge[1] = 1'b0;
end 
// set_min_ge[ 0 ]
initial
begin
	set_min_ge[0] = 1'b0;
end 
// set_sec_shi[ 3 ]
initial
begin
	set_sec_shi[3] = 1'b0;
end 
// set_sec_shi[ 2 ]
initial
begin
	set_sec_shi[2] = 1'b0;
end 
// set_sec_shi[ 1 ]
initial
begin
	set_sec_shi[1] = 1'b0;
end 
// set_sec_shi[ 0 ]
initial
begin
	set_sec_shi[0] = 1'b0;
end 
// set_sec_ge[ 3 ]
initial
begin
	set_sec_ge[3] = 1'b0;
end 
// set_sec_ge[ 2 ]
initial
begin
	set_sec_ge[2] = 1'b0;
end 
// set_sec_ge[ 1 ]
initial
begin
	set_sec_ge[1] = 1'b0;
end 
// set_sec_ge[ 0 ]
initial
begin
	set_sec_ge[0] = 1'b0;
end 

// clock_en
initial
begin
	clock_en = 1'b1;
end 

// set_time_finish
initial
begin
	set_time_finish = 1'b0;
	set_time_finish = #520000 1'b1;
	set_time_finish = #10000 1'b0;
end 

TOP_vlg_sample_tst tb_sample (
	.clk(clk),
	.clock_en(clock_en),
	.clock_hour_ge(clock_hour_ge),
	.clock_hour_shi(clock_hour_shi),
	.clock_min_ge(clock_min_ge),
	.clock_min_shi(clock_min_shi),
	.rst_n(rst_n),
	.set_hour_ge(set_hour_ge),
	.set_hour_shi(set_hour_shi),
	.set_min_ge(set_min_ge),
	.set_min_shi(set_min_shi),
	.set_sec_ge(set_sec_ge),
	.set_sec_shi(set_sec_shi),
	.set_time_finish(set_time_finish),
	.sampler_tx(sampler)
);

TOP_vlg_check_tst tb_out(
	.clock_out(clock_out),
	.data_out(data_out),
	.hour_ge_r(hour_ge_r),
	.hour_shi_r(hour_shi_r),
	.min_ge_r(min_ge_r),
	.min_shi_r(min_shi_r),
	.sec_ge_r(sec_ge_r),
	.sec_shi_r(sec_shi_r),
	.select(select),
	.sampler_rx(sampler)
);
endmodule

